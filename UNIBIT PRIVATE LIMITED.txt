UNIBIT PRIVATE LIMITED


import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArraySumCombinations {
    public static int[][] findCombinations(int[] arr, int target) {
        Map<Integer, List<Integer[]>> map = new HashMap<>();
        List<Integer[]> combinations = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] + arr[j] == target) {
                    Integer[] pair = {arr[i], arr[j]};
                    combinations.add(pair);
                }
            }
        }

        map.put(target, combinations);
        int[][] result = new int[combinations.size()][2];
        for (int i = 0; i < combinations.size(); i++) {
            result[i][0] = combinations.get(i)[0];
            result[i][1] = combinations.get(i)[1];
        }

        return result;
    }

    public static int[][] findDoubleCombinations(int[] arr, int target) {
        int doubleTarget = 2 * target;
        List<Integer[]> combinations = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] + arr[j] == doubleTarget) {
                    Integer[] pair = new Integer[4];
                    pair[0] = arr[i];
                    pair[1] = arr[j];
                    pair[2] = target;
                    pair[3] = target;
                    combinations.add(pair);
                }
            }
        }

        int[][] result = new int[combinations.size()][4];
        for (int i = 0; i < combinations.size(); i++) {
            result[i][0] = combinations.get(i)[0];
            result[i][1] = combinations.get(i)[1];
            result[i][2] = combinations.get(i)[2];
            result[i][3] = combinations.get(i)[3];
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2, -4, -6, -2, 8};
        int target = 4;

        // Find combinations for the target value
        int[][] combinations = findCombinations(arr, target);
        System.out.println("First Combination for \"" + target + "\":");
        for (int[] pair : combinations) {
            System.out.println(Arrays.toString(pair));
        }

        // Merge the array into a single sorted array
        Arrays.sort(arr);
        System.out.println("Merge into a single Array:");
        System.out.println(Arrays.toString(arr));

        // Find combinations for the double target value
        int[][] doubleCombinations = findDoubleCombinations(arr, target);
        System.out.println("Second Combination for \"" + (2 * target) + "\":");
        for (int[] pair : doubleCombinations) {
            System.out.println(Arrays.toString(pair));
        }
    }
}




First Combination for "4":
[1, 3]
[2, 2]
[-4, 8]
[-2, 6]
Merge into a single Array:
[-6, -4, -2, 1, 2, 2, 3, 8]
Second Combination for "8":
[2, 6, 4, 4]
[3, 4, 4, 4]
